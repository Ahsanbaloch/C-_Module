//vector functions
void PmergeMe::sortInsidePairs(std::vector<std::pair <unsigned int, unsigned int> > &vector_pair)
{
	for (size_t i = 0; i < vector_pair.size(); ++i)
	{
		if (vector_pair[i].first > vector_pair[i].second)
			std::swap(vector_pair[i].first, vector_pair[i].second);
	}
}

void PmergeMe::vectorOperation(std::vector<int> vctr)
{
	std::vector<std::pair<unsigned int, unsigned int> > vect_pair;
	std::vector<int>::iterator it = vctr.begin();
	for (unsigned int i = 0; i < vctr.size() / 2; ++i)
	{
	    unsigned int first = *it++;
	    unsigned int second = *it;
	    vect_pair.push_back(std::make_pair(first, second));
	    it++;
	}
	sortInsidePairs(vect_pair);
	//printPairs(vect_pair);
	extractVector(vect_pair);
}

void PmergeMe::extractVector(std::vector<std::pair <unsigned int, unsigned int> > &vector_pair)
{
	std::vector<unsigned int> largest, smallest;
	for (size_t i = 0; i < vector_pair.size(); i++)
		smallest.push_back(vector_pair[i].first);
	for (size_t i = 0; i < vector_pair.size(); i++)
		largest.push_back(vector_pair[i].second);
	std::sort(smallest.begin(), smallest.end());
	organizeVector(smallest, largest);
}

void PmergeMe::organizeVector(std::vector<unsigned int> &sm, std::vector<unsigned int> &lg)
{
	for (size_t i = 0; i < lg.size(); i++)
		sm.insert(std::lower_bound(sm.begin(), sm.end(), lg[i]),lg[i]);
	if (_temp != -1)
		sm.insert(std::lower_bound(sm.begin(), sm.end(), _temp), _temp);
	//printVector(sm);
}


//Deque operations
void PmergeMe::dequeOperation(std::deque<int> dq)
{
	std::deque<std::pair<unsigned int, unsigned int> > dq_pair;
	std::deque<int>::iterator it = dq.begin();
	for (unsigned int i = 0; i < dq.size() / 2; ++i)
	{
	    unsigned int first = *it++;
	    unsigned int second = *it;
	    dq_pair.push_back(std::make_pair(first, second));
	    it++;
	}
	sortInsidePairs(dq_pair);
	//printPairs(vect_pair);
	extractDeque(dq_pair);
}

void PmergeMe::sortInsidePairs(std::deque<std::pair <unsigned int, unsigned int> > &dq_pair)
{
	for (size_t i = 0; i < dq_pair.size(); ++i)
	{
		if (dq_pair[i].first > dq_pair[i].second)
			std::swap(dq_pair[i].first, dq_pair[i].second);
	}
}

void PmergeMe::extractDeque(std::deque<std::pair <unsigned int, unsigned int> > &dq_pair)
{
	std::deque<unsigned int> largest, smallest;
	for (size_t i = 0; i < dq_pair.size(); i++)
		smallest.push_back(dq_pair[i].first);
	for (size_t i = 0; i < dq_pair.size(); i++)
		largest.push_back(dq_pair[i].second);
	std::sort(smallest.begin(), smallest.end());
	organizeDeque(smallest, largest);
}

void PmergeMe::organizeDeque(std::deque<unsigned int> &sm, std::deque<unsigned int> &lg)
{
	for (size_t i = 0; i < lg.size(); i++)
		sm.insert(std::lower_bound(sm.begin(), sm.end(), lg[i]),lg[i]);
	if (_temp != -1)
		sm.insert(std::lower_bound(sm.begin(), sm.end(), _temp), _temp);
	printdeque(sm);
}